CREATE TABLE january_jobs AS
    SELECT *
    FROM job_postings_fact
    WHERE EXTRACT(MONTH FROM job_posted_date) = 1;

CREATE TABLE february_jobs AS
    SELECT *
    FROM job_postings_fact
    WHERE EXTRACT(MONTH FROM job_posted_date) = 2;

CREATE TABLE march_jobs AS
    SELECT *
    FROM job_postings_fact
    WHERE EXTRACT(MONTH FROM job_posted_date) = 3;

SELECT salary_year_avg
FROM job_postings_fact
WHERE salary_year_avg IS NOT NULL
LIMIT 1000;


-- LukeBarousse SQL course CASE expression
SELECT 
    job_id,
    salary_year_avg,
    CASE
        WHEN salary_year_avg >= '85000' THEN 'High'
        WHEN salary_year_avg BETWEEN '75000' AND '85000' THEN 'Standard'
        WHEN salary_year_avg <= '75000' THEN 'Low'
    END AS salary_bucket
FROM 
    job_postings_fact
WHERE
    job_title_short = 'Data Analyst'
    AND salary_year_avg IS NOT NULL
ORDER BY salary_year_avg ASC;


-- LukeBarousse SQL course CASE expression. My modification.
SELECT 
    COUNT(job_id),
    CASE
        WHEN salary_year_avg >= '85000' THEN 'High'
        WHEN salary_year_avg BETWEEN '75000' AND '85000' THEN 'Standard'
        WHEN salary_year_avg <= '75000' THEN 'Low'
    END AS salary_bucket
FROM 
    job_postings_fact
WHERE
    job_title_short = 'Data Analyst'
    AND salary_year_avg IS NOT NULL
GROUP BY salary_bucket;


-- LukeBarousse SQL course CTEs

WITH company_job_count AS (
    SELECT 
        company_id,
        COUNT(*) AS total_jobs
    FROM 
        job_postings_fact
    GROUP BY 
        company_id
)
SELECT 
    company_dim.name AS company_name,
    company_job_count.total_jobs
FROM 
    company_dim
LEFT JOIN company_job_count ON company_job_count.company_id = company_dim.company_id
ORDER BY
    total_jobs DESC;





-- LukeBarousse SQL course CTEs problem 1

WITH top_skills_count AS (
    SELECT 
        skill_id,
        COUNT(*) AS top_skills
    FROM 
        skills_job_dim
    GROUP BY 
        skill_id
)

SELECT 
    s.skills AS skill_name,
    t.top_skills
FROM 
    skills_dim AS s
LEFT JOIN top_skills_count AS t ON s.skill_id = t.skill_id
ORDER BY
    t.top_skills DESC
LIMIT 5;

--As a subquery
SELECT 
    s.skills AS skill_name,
    t.top_skills
FROM 
    skills_dim AS s
LEFT JOIN (
    SELECT 
        skill_id,
        COUNT(*) AS top_skills
    FROM 
        skills_job_dim
    GROUP BY 
        skill_id
        ) AS t
ON 
    s.skill_id = t.skill_id
ORDER BY 
    t.top_skills DESC
LIMIT 5;





-- LukeBarousse SQL course CTEs Problem 2.

SELECT 
    c.name AS company_name,
    COUNT(*) AS total_jobs,
    CASE 
    WHEN COUNT(*) < 10 THEN 'Small'
        WHEN COUNT(*) BETWEEN 10 AND 50 THEN 'Medium'
        ELSE 'Large'
    END AS company_size
FROM 
    company_dim AS c
LEFT JOIN job_postings_fact AS j ON c.company_id = j.company_id
GROUP BY c.company_id 
ORDER BY company_size;



--LukeBarousse SQL course Practice part 7

WITH remote_job_skills AS (
    SELECT 
        skill_id,
        COUNT(*) AS skill_count
    FROM 
        skills_job_dim AS skills_to_job
    INNER JOIN 
        job_postings_fact AS job_postings ON job_postings.job_id = skills_to_job.job_id
    WHERE 
        job_postings.job_work_from_home = TRUE 
        AND job_postings.job_title_short = 'Data Analyst'
    GROUP BY 
        skill_id
)
SELECT 
    skills.skill_id,
    skills AS skill_name,
    skill_count
FROM 
    remote_job_skills
INNER JOIN 
    skills_dim AS skills ON skills.skill_id = remote_job_skills.skill_id
ORDER BY
    skill_count DESC
LIMIT 5;


--LukeBarousse SQL course UNIONS Practic problems
  
SELECT 
    job_title_short,
    job_location,
    job_via,
    job_posted_date::DATE,
    salary_year_avg
FROM (
    SELECT *
    FROM january_jobs
    UNION ALL
    SELECT *
    FROM february_jobs
    UNION ALL
    SELECT *
    FROM march_jobs
) AS quarter_1_job_postings
WHERE 
    salary_year_avg > 70000
    AND job_title_short = 'Data Analyst'
ORDER BY
    salary_year_avg DESC;